/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pantallas.pantallasClientes;

import Usuarios.InicioSesion;
import com.mxrck.autocompleter.TextAutoCompleter;
import conexion.Conexion;
import entidades.Cliente;
import entidades.Contrato;
import gestores.gestoresCliente.BusquedaCliente;
import gestores.gestoresCliente.BusquedaPropietario;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import modelos.ModeloTablaBusquedaCliente;
import modelos.ModeloTablaContratosDelCliente;
import static pantallas.PrincipalAdministrador.tablaContratos;


/**
 *
 * @author Nahuel
 */
public class PantallaBusquedaCliente extends javax.swing.JFrame {

    private TableRowSorter<TableModel> modeloOrdenado;
    
    Dimension dimension=Toolkit.getDefaultToolkit().getScreenSize();
    int alto=(int) dimension.getWidth();
    int ancho=(int) dimension.getHeight();
    /**
     * Creates new form PantallaBusquedaCliente
     */
    public PantallaBusquedaCliente() {
        initComponents();
        this.setResizable(false);
        setLocationRelativeTo(null);
        pack();
        ArrayList<Cliente> listaClientes=BusquedaCliente.consultaCliente();
        ModeloTablaBusquedaCliente modelo=new ModeloTablaBusquedaCliente(listaClientes){
            @Override
            public Class getColumnClass(int columna) {
                if (columna == 0)
                    return Integer.class;
                if (columna == 4)
                    return Integer.class;
                return String.class;
            }
        };
        tablaClientes.setModel(modelo);
        modeloOrdenado = new TableRowSorter<TableModel>(modelo);
        tablaClientes.setRowSorter(modeloOrdenado);
        tablaClientes.getColumnModel().getColumn(0).setMaxWidth(50);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.LEFT);
        tablaClientes.getColumnModel().getColumn(0).setCellRenderer(tcr);

        Autocompletar();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        dni = new javax.swing.JTextField();
        comboTipos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Buscar Cliente");

        jPanel1.setBackground(java.awt.Color.red);

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        dni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dniActionPerformed(evt);
            }
        });
        dni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dniKeyTyped(evt);
            }
        });

        comboTipos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos","Propietarios","Inquilinos","Garantes" }));
        comboTipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTiposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dni, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 367, Short.MAX_VALUE)
                .addComponent(comboTipos, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(comboTipos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(null);

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaClientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        String numero=dni.getText();
        
        if (isNumeric(numero)){
            BuscarPorDni();
        }else{
            BuscarPorApellido();
        }



        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void comboTiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTiposActionPerformed

        if(comboTipos.getSelectedItem().equals("Todos")){
            ArrayList<Cliente> listaClientes=BusquedaCliente.consultaCliente();
            ModeloTablaBusquedaCliente modelo=new ModeloTablaBusquedaCliente(listaClientes){
                @Override
                public Class getColumnClass(int columna) {
                    if (columna == 0)
                        return Integer.class;
                    if (columna == 4)
                        return Integer.class;
                    return String.class;
                }
            };
            tablaClientes.setModel(modelo);
            modeloOrdenado = new TableRowSorter<TableModel>(modelo);
            tablaClientes.setRowSorter(modeloOrdenado);
            tablaClientes.getColumnModel().getColumn(0).setMaxWidth(50);
            DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
            tcr.setHorizontalAlignment(SwingConstants.LEFT);
            tablaClientes.getColumnModel().getColumn(0).setCellRenderer(tcr);   
        }else{                    
            String tipo="";
            if(comboTipos.getSelectedItem().equals("Propietarios")){
                tipo="Propietario";
            }else if(comboTipos.getSelectedItem().equals("Inquilinos")){
                tipo="Inquilino";
            }else if(comboTipos.getSelectedItem().equals("Garantes")){
                tipo="Garante";
            }
            ArrayList<Cliente> listaClientes=BusquedaCliente.consultaBusquedaClienteTipo(tipo);
            if(listaClientes.isEmpty()){
                JOptionPane.showMessageDialog(new JDialog(),"No se encuentra el Cliente");
            }else{
                ModeloTablaBusquedaCliente modelo=new ModeloTablaBusquedaCliente(listaClientes){
                    @Override
                    public Class getColumnClass(int columna) {
                        if (columna == 0)
                            return Integer.class;
                        if (columna == 4)
                            return Integer.class;
                        return String.class;
                    }
                };
                tablaClientes.setModel(modelo);
                modeloOrdenado = new TableRowSorter<TableModel>(modelo);
                tablaClientes.setRowSorter(modeloOrdenado);
                tablaClientes.getColumnModel().getColumn(0).setMaxWidth(50);
                DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.LEFT);
                tablaClientes.getColumnModel().getColumn(0).setCellRenderer(tcr);
            }
        }       
    }//GEN-LAST:event_comboTiposActionPerformed

    private void dniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dniKeyTyped
        if((int)evt.getKeyChar()>32 && (int)evt.getKeyChar()<=47 
                ||(int)evt.getKeyChar()>=58 && (int)evt.getKeyChar()<=64 
                || (int)evt.getKeyChar()>=91 && (int)evt.getKeyChar()<=96 
                || (int)evt.getKeyChar()>=123 && (int)evt.getKeyChar()<=255){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Ingrese solo letras o numeros ");
        }else{
            
        }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_dniKeyTyped

    private void dniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dniActionPerformed

    }//GEN-LAST:event_dniActionPerformed

    private void tablaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClientesMouseClicked

        if(evt.getClickCount()==2){
            int row = tablaClientes.getSelectedRow();
				int id=Integer.parseInt(tablaClientes.getValueAt(row, 0).toString());
				
				Cliente prop=BusquedaPropietario.busquedaDatos(id);
				DatosCliente datosP=new DatosCliente();
				datosP.apellido.setText(prop.getApellido());
				datosP.apellidoM.setText(prop.getApellidoMaterno());
				datosP.celular.setText(Integer.toString(prop.getCelular()));
				datosP.ciudad.setText(prop.getLocalidad());
				datosP.correo.setText(prop.getCorreo());
				datosP.cuit.setText(Integer.toString(prop.getCuit()));
				datosP.dgi.setText(prop.getDgi());
				datosP.direccion.setText(prop.getDireccion());
				datosP.dni.setText(Integer.toString(prop.getDni()));
				datosP.estadoCivil.setText(prop.getEstadoCivil());
				datosP.fechaNac.setText(prop.getFechaNac());
				datosP.idPropietario.setText(Integer.toString(prop.getId()));
				datosP.nombre.setText(prop.getNombre());
				datosP.profesion.setText(prop.getProfesion());
				datosP.provincia.setText(prop.getProvincia());
				datosP.telefono.setText(Integer.toString(prop.getTel()));
				
                                datosP.setSize(alto/2, ancho/2);
                                datosP.pack();
                                datosP.setLocationRelativeTo(null);
                                
                                if(InicioSesion.usuarioEnSesion.getTipo().equals("EMPLEADO")){
                                    datosP.btnEliminarCliente.setEnabled(false);
                                }
                                ArrayList<Contrato> listaContratos=BusquedaCliente.contratosDelCliente(prop.getId());
                                ModeloTablaContratosDelCliente modelo=new ModeloTablaContratosDelCliente(listaContratos);
                                DatosCliente.tablaContratosCliente.setModel(modelo);
				datosP.setVisible(true);
            
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaClientesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaBusquedaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaBusquedaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaBusquedaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaBusquedaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaBusquedaCliente().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboTipos;
    private static javax.swing.JTextField dni;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable tablaClientes;
    // End of variables declaration//GEN-END:variables

    
    public static void Autocompletar(){


            TextAutoCompleter  t=new TextAutoCompleter (dni);
        try{
            PreparedStatement pst=Conexion.getConexionn().prepareStatement("select distinct dni,apellido from cliente");
            ResultSet rs=pst.executeQuery();
            PreparedStatement pst1=Conexion.getConexionn().prepareStatement("select distinct apellido from cliente");
            ResultSet rs1=pst1.executeQuery();
            while(rs.next()){
                t.addItem(rs.getString("dni"));               
                //t.setCaseSensitive(false);
            }
            while(rs1.next()){
                t.addItem(rs1.getString("apellido"));
            }
        }catch(SQLException e){
            e.printStackTrace();
        }    
    }
    
    public void AutocompletarApellido(){
        TextAutoCompleter  x=new TextAutoCompleter (dni);
        try{
            PreparedStatement pst=Conexion.getConexionn().prepareStatement("select distinct apellido from cliente");
            ResultSet rs=pst.executeQuery();
            while(rs.next()){
                x.addItem(rs.getString("apellido"));
                //t.setCaseSensitive(false);
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    public void BuscarPorDni(){

        if(dni.getText().length()==0){
            ArrayList<Cliente> listaClientes=BusquedaCliente.consultaCliente();
        ModeloTablaBusquedaCliente modelo=new ModeloTablaBusquedaCliente(listaClientes){
            @Override
            public Class getColumnClass(int columna) {
                if (columna == 0)
                    return Integer.class;
                if (columna == 4)
                    return Integer.class;
                return String.class;
            }
        };
        tablaClientes.setModel(modelo);
        modeloOrdenado = new TableRowSorter<TableModel>(modelo);
        tablaClientes.setRowSorter(modeloOrdenado);
        tablaClientes.getColumnModel().getColumn(0).setMaxWidth(50);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.LEFT);
        tablaClientes.getColumnModel().getColumn(0).setCellRenderer(tcr);
        }else{  
        int dniCliente=Integer.parseInt(dni.getText());
        ArrayList<Cliente> listaClientes=BusquedaCliente.consultaBusquedaClienteDNI(dniCliente);
        if(listaClientes.isEmpty()){
            JOptionPane.showMessageDialog(new JDialog(),"No se encuentra el Cliente");
        }else{
            ModeloTablaBusquedaCliente modelo=new ModeloTablaBusquedaCliente(listaClientes){
            @Override
            public Class getColumnClass(int columna) {
                if (columna == 0)
                    return Integer.class;
                if (columna == 4)
                    return Integer.class;
                return String.class;
            }
        };
        tablaClientes.setModel(modelo);
        modeloOrdenado = new TableRowSorter<TableModel>(modelo);
        tablaClientes.setRowSorter(modeloOrdenado);
        tablaClientes.getColumnModel().getColumn(0).setMaxWidth(50);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.LEFT);
        tablaClientes.getColumnModel().getColumn(0).setCellRenderer(tcr);
        }
        }
    }
    
    public void BuscarPorApellido(){
        
        if(dni.getText().length()==0){
            ArrayList<Cliente> listaClientes=BusquedaCliente.consultaCliente();
        ModeloTablaBusquedaCliente modelo=new ModeloTablaBusquedaCliente(listaClientes){
            @Override
            public Class getColumnClass(int columna) {
                if (columna == 0)
                    return Integer.class;
                if (columna == 4)
                    return Integer.class;
                return String.class;
            }
        };
        tablaClientes.setModel(modelo);
        modeloOrdenado = new TableRowSorter<TableModel>(modelo);
        tablaClientes.setRowSorter(modeloOrdenado);
        tablaClientes.getColumnModel().getColumn(0).setMaxWidth(50);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.LEFT);
        tablaClientes.getColumnModel().getColumn(0).setCellRenderer(tcr);
        }else{  
        ArrayList<Cliente> listaClientes=BusquedaCliente.consultaBusquedaClienteApellido(dni.getText(),comboTipos.getSelectedItem().toString());
        if(listaClientes.isEmpty()){
            JOptionPane.showMessageDialog(new JDialog(),"No se encuentra el Cliente");
        }else{
            ModeloTablaBusquedaCliente modelo=new ModeloTablaBusquedaCliente(listaClientes){
            @Override
            public Class getColumnClass(int columna) {
                if (columna == 0)
                    return Integer.class;
                if (columna == 4)
                    return Integer.class;
                return String.class;
            }
        };
        tablaClientes.setModel(modelo);
        modeloOrdenado = new TableRowSorter<TableModel>(modelo);
        tablaClientes.setRowSorter(modeloOrdenado);
        tablaClientes.getColumnModel().getColumn(0).setMaxWidth(50);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.LEFT);
        tablaClientes.getColumnModel().getColumn(0).setCellRenderer(tcr);
        }
        }
    }
    
    private static boolean isNumeric(String numero){
	try {
		Integer.parseInt(numero);
		return true;
	} catch (NumberFormatException nfe){
		return false;
	}
}
}
